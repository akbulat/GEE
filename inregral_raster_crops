/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":0.01,"gamma":0.1};
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Загрузка геометрии FAO GAUL First-Level Administrative Units
var faoGaul = ee.FeatureCollection("FAO/GAUL/2015/level1");

// Загрузка коллекции Land Cover
var esri_lulc10 = ee.ImageCollection("projects/sat-io/open-datasets/landcover/ESRI_Global-LULC_10m_TS");

// Функция для переопределения классов и маскирования
function remapper(image){
  var remapped = image.remap([1, 2, 4, 5, 7, 8, 9, 10, 11], [0, 0, 0, 1, 0, 0, 0, 0, 0]).rename('LandCover');
  return remapped.selfMask(); // Применение маски для значений 0
}

// Создание палитры и легенды
var dict = {
  "names": ["Crops"],
  "colors": ["#FFDB5C"]
};

var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

function addCategoricalLegend(panel, dict, title) {
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  });
  panel.add(legendTitle);
  
  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
  panel.add(loading);
  
  var makeRow = function(color, name) {
    var colorBox = ui.Label({
      style: {
        backgroundColor: color,
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
  
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
  var palette = dict['colors'];
  var names = dict['names'];
  loading.style().set('shown', false);
  
  for (var i = 0; i < names.length; i++) {
    panel.add(makeRow(palette[i], names[i]));
  }
  
  Map.add(panel);
}

// Добавление легенды
addCategoricalLegend(legend, dict, 'Land Cover: Crops');

// Отображение карты для каждого года
var years = ['2020', '2021', '2022'];
years.forEach(function(year) {
  var image = esri_lulc10
    .filterBounds(faoGaul.filter(ee.Filter.eq('ADM1_CODE', 2490))) // Здесь выбираем по админ коду
    .filterDate(year + '-01-01', year + '-12-31')
    .map(remapper)
    .mosaic();
  
  var clippedImage = image.clip(faoGaul.filter(ee.Filter.eq('ADM1_CODE', 2490)).geometry()); // Здесь также выбираем по админ коду
  
  Map.addLayer(clippedImage, {min: 0, max: 1, palette: ['#000000', '#FFDB5C']}, year + ' Crops');
  Export.image.toDrive({
    image: clippedImage,
    description: year + '_Crops_Altay_Republic',
    folder: 'Your_Folder_Name', // Замените на имя вашей папки в Google Drive
    fileNamePrefix: year + '_Crops_Altay_Republic',
    scale: 10, // Разрешение в метрах
    region: faoGaul.filter(ee.Filter.eq('ADM1_CODE', 2489)).geometry(),
    maxPixels: 2614960812
  });
});

// Загрузка геометрии Алтайского края
var altai = ee.FeatureCollection("projects/ee-akfazlief/assets/altayski_cry");
var altaiRegion = altai.geometry();

// Загрузка данных о сельскохозяйственных угодьях за 2003, 2007, 2011, 2015 и 2019 годы
var cropland2003 = ee.ImageCollection("users/potapovpeter/Global_cropland_2003").mosaic();
var cropland2007 = ee.ImageCollection("users/potapovpeter/Global_cropland_2007").mosaic();
var cropland2011 = ee.ImageCollection("users/potapovpeter/Global_cropland_2011").mosaic();
var cropland2015 = ee.ImageCollection("users/potapovpeter/Global_cropland_2015").mosaic();
var cropland2019 = ee.ImageCollection("users/potapovpeter/Global_cropland_2019").mosaic();

// Обрезка данных о сельскохозяйственных угодьях по границе Алтайского края
var clippedCropland2003 = cropland2003.clip(altaiRegion);
var clippedCropland2007 = cropland2007.clip(altaiRegion);
var clippedCropland2011 = cropland2011.clip(altaiRegion);
var clippedCropland2015 = cropland2015.clip(altaiRegion);
var clippedCropland2019 = cropland2019.clip(altaiRegion);

// Функция для маскирования значения 0 и преобразования в 1
var maskZero = function(image) {
  return image.updateMask(image.neq(0)).selfMask();
};

// Применение функции маскирования к изображениям
var maskedCropland2003 = maskZero(clippedCropland2003);
var maskedCropland2007 = maskZero(clippedCropland2007);
var maskedCropland2011 = maskZero(clippedCropland2011);
var maskedCropland2015 = maskZero(clippedCropland2015);
var maskedCropland2019 = maskZero(clippedCropland2019);

// Визуализация слоев за разные годы
var visParams = {
  min: 0,
  max: 1,
  palette: ['white', 'green']
};

Map.addLayer(maskedCropland2003, visParams, 'Сельскохозяйственные угодья 2000-2003');
Map.addLayer(maskedCropland2007, visParams, 'Сельскохозяйственные угодья 2004-2007');
Map.addLayer(maskedCropland2011, visParams, 'Сельскохозяйственные угодья 2008-2011');
Map.addLayer(maskedCropland2015, visParams, 'Сельскохозяйственные угодья 2012-2015');
Map.addLayer(maskedCropland2019, visParams, 'Сельскохозяйственные угодья 2016-2019');

// Загрузка интегральных слоев
var croplandMask1984_1990 = ee.Image("projects/ee-akfazlief/assets/cropland_mask_1984_1990");
var croplandMask1991_1996 = ee.Image("projects/ee-akfazlief/assets/cropland_mask_1991_1996");
var croplandMask1996_1999 = ee.Image("projects/ee-akfazlief/assets/cropland_mask_1996_1999");
var croplandMask2020 = ee.Image("projects/ee-akfazlief/assets/crops_2020_ak");
var croplandMask2021 = ee.Image("projects/ee-akfazlief/assets/crops_2021_ak");
var croplandMask2022 = ee.Image("projects/ee-akfazlief/assets/crops_2022_ak");
// Объединяем растры с помощью максимума
var integratedCropland = ee.ImageCollection([
  cropland2003, cropland2007, cropland2011, cropland2015, cropland2019,
  croplandMask1984_1990.select('b1'),
  croplandMask1991_1996.select('b1'),
  croplandMask1996_1999.select('b1'),
  croplandMask2020.select('b1'),
  croplandMask2021.select('b1'),
  croplandMask2022.select('b1')
]).max();
var mask = integratedCropland.clip(altai).gt(0);
var mask = integratedCropland.gt(0);
var maskedIntegratedCropland = maskZero(integratedCropland).clip(altai).gt(0);
// Визуализация интегрального слоя
var visParamsIntegrated = {
  min: 0,
  max: 1,  
  palette: ['#000000', '#FFDB5C']
};

Map.addLayer(maskedIntegratedCropland, {min: 0, max: 1, palette: ['white', 'green']}, "Masked Integrated Cropland");
// Редукция в пределах границ Алтайского края
var area = maskedIntegratedCropland.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: altaiRegion,
  scale: 10,  // Разрешение в метрах
  maxPixels: 1e13
});

// Получаем площадь в квадратных метрах
var areaSquareMeters = area.get('b1');

// Переводим в гектары
var areaHectares = ee.Number(areaSquareMeters).divide(10000);

// Выводим результат
print('Площадь интегрального слоя в гектарах:', areaHectares);